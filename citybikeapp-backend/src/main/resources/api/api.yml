openapi: 3.0.1
info:
  title: City Bike App API
  version: 1.0.0
paths:
  /health:
    get:
      operationId: getHealth
      responses:
        "200":
          description: getHealth 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthResult'
  /health/{selector}:
    get:
      operationId: getHealth_1
      parameters:
      - name: selector
        in: path
        required: true
        schema:
          $ref: '#/components/schemas/HealthCheckType'
      responses:
        "200":
          description: getHealth_1 200 response
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/HealthResult'
  /journey:
    get:
      tags:
      - journey
      summary: List journeys
      operationId: getJourneys
      parameters:
      - name: orderBy
        in: query
        description: Sort results by this property
        schema:
          type: string
          default: departureAt
          enum:
          - departureAt
          - arrivalAt
          - distance
          - duration
      - name: sort
        in: query
        description: Sort results in this direction
        schema:
          $ref: '#/components/schemas/Direction'
      - name: pageSize
        in: query
        description: Limit amount of results. Can be limited by application configuration.
        schema:
          type: integer
          format: int32
          nullable: true
      - name: nextCursor
        in: query
        description: "Cursor to fetch the next page. Can expose some implementation\
          \ details, such as the values used in keyset pagination, but should be treated\
          \ as an opaque string. Don't change other query parameters (except pageSize)\
          \ when providing the cursor in order to receive a meaningful response, meaning\
          \ the cursor is only valid for the same set of parameters."
        schema:
          type: string
      responses:
        "200":
          description: getJourneys 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/JourneysResponse'
  /station:
    get:
      tags:
      - station
      summary: Get stations using pagination and optional text search.
      description: "Returns multiple stations with a maximum page size of given page\
        \ size parameter. If page size is not defined then application default is\
        \ used. Page number can be provided to paginate results. Optional search string\
        \ can be used to limit matches. Note that if paginating query params result\
        \ in no stations, the total pages count might not hold true! That is, there\
        \ could still be possible earlier results."
      operationId: getStations
      parameters:
      - name: search
        in: query
        description: Optional search string to limit station results. Will look for
          matches in station names and street addresses. Separate search words with
          + symbol.
        schema:
          type: string
          nullable: true
        example: kontu+tie
      - name: page
        in: query
        description: Optional pagination offset.
        schema:
          type: integer
          format: int32
          nullable: true
        example: "3"
      - name: pageSize
        in: query
        description: Optional page size.
        schema:
          type: integer
          format: int32
          nullable: true
        example: "25"
      responses:
        "200":
          description: getStations 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationsResponse'
  /station/limited:
    get:
      tags:
      - station
      summary: Get all stations
      description: Get all stations with limited information
      operationId: getAllStationsLimited
      responses:
        "200":
          description: getAllStationsLimited 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationsLimitedResponse'
  /station/{id}:
    get:
      tags:
      - station
      summary: Get single station detailed information
      operationId: getStationDetails
      parameters:
      - name: id
        in: path
        description: Station ID
        required: true
        schema:
          type: integer
          format: int32
      responses:
        "200":
          description: getStationDetails 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StationDetailsResponse'
  /station/{id}/statistics:
    get:
      tags:
      - station
      summary: Get statistics for a single station
      description: "Statistics are filtered using the optional query parameters. Note\
        \ that malformed query parameters do not result in failure. Journey is included\
        \ in statistics if its departure timestamp is between the from and to parameters.\
        \ Timestamps must be without timezone or UTC designator (Z).They are interpreted\
        \ in local Helsinki time internally. Example: if you want journey statistics\
        \ until end of June 2022, use format 2022-06-30T23:59:59"
      operationId: getStationStatistics
      parameters:
      - name: id
        in: path
        description: Station ID
        required: true
        schema:
          type: integer
          format: int32
      - name: from
        in: query
        description: Earliest moment in time to include in statistics. ISO8601 timestamp with or without offset.
        schema:
          type: string
          format: date-time
          nullable: true
          example: 2023-01-29T13:47:51Z
      - name: to
        in: query
        description: Latest moment in time to include in statistics. ISO8601 timestamp with or without offset.
        schema:
          type: string
          format: date-time
          nullable: true
          example: 2023-01-29T13:47:51Z
      responses:
        "200":
          description: getStationStatistics 200 response
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/StatisticsResponse'
components:
  schemas:
    CursorMeta:
      type: object
      properties:
        nextCursor:
          type: string
          description: Paging cursor. Treat as an opaque string. Does not include
            the query parameters which produced the cursor so the next request using
            the cursor must provide the same parameters for meaningful pagination.
          nullable: true
    HealthCheckType:
      type: string
      enum:
      - LIVENESS
      - READINESS
    HealthResult:
      type: object
      properties:
        name:
          type: string
        status:
          $ref: '#/components/schemas/HealthStatus'
        details:
          $ref: '#/components/schemas/Object'
    HealthStatus:
      required:
      - description
      - name
      - operational
      - severity
      type: object
      properties:
        name:
          type: string
        description:
          type: string
          nullable: true
        operational:
          type: boolean
          nullable: true
        severity:
          type: integer
          format: int32
          nullable: true
    Journey:
      required:
      - arrivalAt
      - arrivalStationId
      - departureAt
      - departureStationId
      - distance
      - duration
      - id
      type: object
      properties:
        id:
          type: string
        departureAt:
          description: Timestamp of departure in ISO8601. Offset always UTC, client responsible for representing 
            timezone (always Helsinki currently).
          type: string
          format: date-time
          nullable: false
          example: 2020-02-03T11:00:00Z
        arrivalAt:
          description: Timestamp of departure in ISO8601. Offset always UTC, client responsible for representing
            timezone (always Helsinki currently).
          type: string
          format: date-time
          nullable: false
          example: 2020-02-03T11:00:00Z
        departureStationId:
          type: string
        arrivalStationId:
          type: string
        distance:
          type: integer
          description: Distance in meters
          format: int32
          nullable: false
        duration:
          type: integer
          description: Duration in seconds
          format: int32
          nullable: false
    JourneysResponse:
      required:
      - journeys
      - meta
      type: object
      properties:
        journeys:
          type: array
          items:
            $ref: '#/components/schemas/Journey'
        meta:
          $ref: '#/components/schemas/CursorMeta'
    Meta:
      required:
      - totalPages
      type: object
      properties:
        totalPages:
          type: integer
          format: int32
    Object:
      type: object
    Station:
      required:
      - addressFinnish
      - capacity
      - cityFinnish
      - id
      - nameFinnish
      - operator
      type: object
      properties:
        id:
          type: string
        nameFinnish:
          type: string
        addressFinnish:
          type: string
        cityFinnish:
          type: string
        operator:
          type: string
        capacity:
          type: integer
          format: int32
    StationDetails:
      required:
      - addressFinnish
      - addressSwedish
      - capacity
      - cityFinnish
      - citySwedish
      - id
      - latitude
      - longitude
      - nameEnglish
      - nameFinnish
      - nameSwedish
      - operator
      type: object
      properties:
        id:
          type: string
        nameFinnish:
          type: string
        nameSwedish:
          type: string
        nameEnglish:
          type: string
        addressFinnish:
          type: string
        addressSwedish:
          type: string
        cityFinnish:
          type: string
        citySwedish:
          type: string
        operator:
          type: string
        capacity:
          type: integer
          format: int32
        longitude:
          type: number
          format: double
        latitude:
          type: number
          format: double
    StationDetailsResponse:
      required:
      - station
      type: object
      properties:
        station:
          $ref: '#/components/schemas/StationDetails'
    StationLimited:
      required:
      - id
      - nameFinnish
      type: object
      properties:
        id:
          type: string
        nameFinnish:
          type: string
    StationStatistics:
      required:
      - arrivalAverageDistance
      - arrivalCount
      - departureAverageDistance
      - departureCount
      - topStationsForArrivingHere
      - topStationsForDepartingTo
      type: object
      properties:
        departureCount:
          type: integer
          description: Amount of journeys departing from the queried station
          format: int64
          nullable: false
        arrivalCount:
          type: integer
          description: Amount of journeys arriving to the queried station
          format: int64
          nullable: false
        departureAverageDistance:
          type: number
          description: Average distance of departing journeys in meters
          format: double
          nullable: false
        arrivalAverageDistance:
          type: number
          description: Average distance of arriving journeys in meters
          format: double
          nullable: false
        topStationsForArrivingHere:
          type: array
          description: Sorted list of top five most popular (by journey count) stations
            of journeys that end in the queried station. Most popular station is first
            in the list.
          nullable: false
          items:
            $ref: '#/components/schemas/TopStation'
        topStationsForDepartingTo:
          type: array
          description: Sorted list of top five most popular (by journey count) stations
            of journeys that start in the queried station. Most popular station is
            first in the list.
          nullable: false
          items:
            $ref: '#/components/schemas/TopStation'
      description: Station statistics for a given station.
    StationsLimitedResponse:
      required:
      - stations
      type: object
      properties:
        stations:
          type: array
          items:
            $ref: '#/components/schemas/StationLimited'
    StationsResponse:
      required:
      - meta
      - stations
      type: object
      properties:
        stations:
          type: array
          items:
            $ref: '#/components/schemas/Station'
        meta:
          $ref: '#/components/schemas/Meta'
    StatisticsResponse:
      required:
      - statistics
      type: object
      properties:
        statistics:
          $ref: '#/components/schemas/StationStatistics'
    TopStation:
      required:
      - id
      - journeyCount
      type: object
      properties:
        id:
          type: string
        journeyCount:
          type: integer
          format: int64
    Direction:
      type: string
      default: desc
      enum:
        - asc
        - desc
